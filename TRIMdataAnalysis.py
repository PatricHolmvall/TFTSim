# This file is part of TFTSim.
#
# TFTSim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# TFTSim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with TFTSim.  If not, see <http://www.gnu.org/licenses/>.

"""
Preform simple data analysis on data files generated by TRIM.

"""

from __future__ import division
import numpy as np
import pylab as pl
from matplotlib import rc
from matplotlib.ticker import *
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import shelve
import csv

"""
bigimage = True  # 2 column or 1 column image

msize = 5
fig_width_pt = 512.0
legendloc = 2
fsize=16

# Calculate figure size using golden ratio method
inches_per_pt = 1.0/72.27                    # Convert pt to inch
golden_mean = (np.sqrt(5)-1.0)/2.0           # Aesthetic ratio
fig_width = fig_width_pt*inches_per_pt       # width in inches
fig_height = fig_width*golden_mean           # height in inches
fig_height = fig_height + 40 * inches_per_pt # Add space for title
fig_size =  [fig_width,fig_height]

# Set the RC LaTeX parameters
params = {'backend': 'ps',
         'axes.labelsize': fsize,
         'text.fontsize': 2.0*fsize,
         'legend.fontsize': 1.0*fsize,
         'xtick.labelsize': 1.0*fsize,
         'ytick.labelsize': 1.0*fsize,
         'text.usetex': True,
         'figure.figsize': fig_size}

pl.rcParams.update(params)
"""

simulationPaths = ["Al2O3/2013-06-11/68Ni125MeV/TRIMOUT.txt", #0 68Ni 125 MeV
                   "Al2O3/2013-06-11/50Ca12MeV/TRIMOUT.txt", #1 50Ca 12 MeV
                   "Al2O3/2013-06-11/68Ni26MeV/TRIMOUT.txt", #2 68Ni 26 MeV
                   "Al2O3/2013-06-11/50Ca110MeV/TRIMOUT.txt", #3 50Ca 110 MeV
                   "Al2O3vacuum50cm/2013-06-11/68Ni125MeV/TRIMOUT.txt", #4 68Ni 125 MeV w. vacuum50cm
                   "Al2O3vacuum50cm/2013-06-11/50Ca12MeV/TRIMOUT.txt", #5 50Ca 12 MeV w. vacuum50cm
                   "Al2O3vacuum50cm/2013-06-11/68Ni26MeV/TRIMOUT.txt", #6 68Ni 26 MeV w. vacuum50cm
                   "Al2O3vacuum50cm/2013-06-11/50Ca110MeV/TRIMOUT.txt", #7 50Ca 110 MeV w. vacuum50cm
                   "Al2O3/2013-06-11/../TRIMOUT.txt", #4
                   ""
                   ]
simTitles = [r'$^{68}$Ni, 125 MeV',
             r'$^{50}$Ca, 12 MeV',
             r'$^{68}$Ni, 26 MeV',
             r'$^{50}$Ca, 110 MeV']
simulations = simulationPaths[4:8]
samePlot = False

c = 0
for sim in simulations:
    c += 1
data = 0
lengths = [0] * c
stdy = [0] * c
stdz = [0] * c

c = 0
for sim in simulations:
    print('Simulation: ' + sim)
    if isinstance(data, int):
        data = np.genfromtxt('trimData/' + sim, dtype=None, usecols=(-3,-2,-1), invalid_raise=False, skip_header=12, skip_footer=1)
    else:
        data = np.append(data,np.genfromtxt('trimData/' + sim, dtype=None, usecols=(-3,-2,-1), invalid_raise=False, skip_header=12, skip_footer=1),axis=0)
    print('coord\tmean\t\tstd')
    print('x\t%f\t%f' % (np.mean(data[:,0]),np.std(data[:,0])))
    print('y\t%f\t%f' % (np.mean(data[:,1]),np.std(data[:,1])))
    print('z\t%f\t%f' % (np.mean(data[:,2]),np.std(data[:,2])))
    stdy[c] = np.std(data[:,1])
    stdz[c] = np.std(data[:,2])
    lengths[c] = len(data[:,0])
    c += 1

c = 0
data2 = np.zeros_like(data)
for row in data:
    l = np.sqrt(data[c,0]**2+data[c,1]**2+data[c,2]**2)
    #l = 50
    data2[c,0] = data[c,0]*l
    data2[c,1] = data[c,1]*l
    data2[c,2] = data[c,2]*l
    c += 1
"""
data = np.loadtxt('trimData/' + sim, dtype={'rows': ('status',
                                                     'ion_number',
                                                     'Z',
                                                     'energy',
                                                     'depth_x',
                                                     'lateral_y',
                                                     'lateral_z',
                                                     'cos_x',
                                                     'cos_y',
                                                     'cos_z'),
                                             'formats': ('S1',
                                                        'i4',
                                                        'f4')})
"""
#print('x\t'+str(np.mean(data[0]))+'\t'+str(np.std(data[0])))
nbins = 100
fig1 = plt.figure(1)
if samePlot:
    H, xedges, yedges = np.histogram2d(data2[:,1],data2[:,2],bins=nbins)
    # H needs to be rotated and flipped
    #H = np.rot90(H)
    #H = np.flipud(H)
    # Mask zeros
    Hmasked = np.ma.masked_where(H==0,H) # Mask pixels with a value of zero
    plt.pcolormesh(xedges,yedges,Hmasked)

    plt.title('Beam scattering')
    plt.xlabel('y')
    plt.ylabel('z')
    cbar = plt.colorbar()
    cbar.ax.set_ylabel('Counts')
else:
    snum = 220
    c = 0
    prev_l = 0
    for l in lengths:
        snum += 1
        ax = fig1.add_subplot(snum)
        print(str(prev_l)+':'+str(l))
        H, xedges, yedges = np.histogram2d(data2[prev_l:l,1],
                                           data2[prev_l:l,2],
                                           bins=nbins)
        # H needs to be rotated and flipped
        #H = np.rot90(H)
        #H = np.flipud(H)
        # Mask zeros
        Hmasked = np.ma.masked_where(H==0,H) # Mask pixels with a value of zero
        plt.pcolormesh(xedges,yedges,Hmasked)

        #plt.xlim([0.01, 0.02])
        #plt.ylim([-0.015, -0.055])
        #plt.axis('equal')
        plt.title(simTitles[c])
        plt.xlabel('y [], std: '+str(stdy[c]))
        plt.ylabel('z [], std: '+str(stdz[c]))
        cbar = plt.colorbar()
        cbar.ax.set_ylabel('Counts')
        c += 1
        prev_l = l
"""
fig1 = plt.figure(2)
H_log = np.log(H)
plt.imshow(H_log)
plt.xlabel('y')
plt.ylabel('z')
cbar = plt.colorbar()
cbar.ax.set_ylabel('Counts')
"""
plt.show()
"""
with open('trimData/' + sim, 'rb') as simFile:
    count = 0
    data = csv.reader(simFile, delimiter='\t')
    for row in data:
        if count < 10:
            print row
        count += 1
    #table = [row for row in data]
print(count)
"""
"""
c = 0
tot = 0
for sim in simulations:
    sv = shelve.open("results/" + sim + 'shelvedVariables.sb')
    for row in sv:
        if sv[row]['status'] == 0:
            c += 1
    tot += len(sv)
    sv.close()

xy_forbidden = np.zeros([tot-c,2])
xy_allowed = np.zeros([c,2])
Ec = np.zeros(c)
a = np.zeros(c)
Ea = np.zeros(c)
Ef = np.zeros(c)
Ekin = np.zeros([c,3])
runs = np.zeros(c)
Ds = np.zeros(c)

c2 = 0
c3 = 0
for sim in simulations:
    sv = shelve.open("results/" + sim + 'shelvedVariables.sb')
    for row in sv:
        if sv[row]['status'] == 0:
            Ec[c2] = np.sum(sv[row]['Ec0'])
            a[c2] = sv[row]['angle']
            Ea[c2] = sv[row]['Ekin'][0]
            Ef[c2] = np.sum(sv[row]['Ekin'][1:3])
            runs[c2] = sv[row]['runs']
            xy_allowed[c2][0] = sv[row]['r0'][2]
            xy_allowed[c2][1] = sv[row]['r0'][1]
            Ds[c2] = (sv[row]['r0'][4]-sv[row]['r0'][2])
            c2 += 1
        else:
            xy_forbidden[c3][0] = sv[row]['r0'][2]
            xy_forbidden[c3][1] = sv[row]['r0'][1]
            c3 += 1
    Qval = sv[row]['Q']
    sv.close()

#print("Runs per simulation [mean,std,min,max]: ["+str(np.mean(runs))+','+\
#      str(np.std(runs))+","+str(int(np.min(runs)))+","+str(int(np.max(runs)))+"]")

# scatter area
# ea vs ef 2d hist
# angle 1d hist

################################################################################
#                                  Ea vs Ef                                    #
################################################################################
if energyDistribution:
    nbins = 10
    H, xedges, yedges = np.histogram2d(Ef,Ea)#,bins=nbins)
    # H needs to be rotated and flipped
    #H = np.rot90(H)
    #H = np.flipud(H)
    # Mask zeros
    Hmasked = np.ma.masked_where(H==0,H) # Mask pixels with a value of zero
    fig1 = plt.figure(1)
    plt.pcolormesh(xedges,yedges,Hmasked)

    maxIndex = 0
    ymax = yedges[0]
    for i in yedges:
        if i > ymax:
            ymax = i
            maxIndex = c

    yline = np.linspace(ymax*1.1,0,1000)
    xline = Qval * np.ones(len(yline)) - yline
    plt.plot(xline,yline,'r--',linewidth=5.0,label=str('Q=%1.1f' % Qval))
    plt.title('Energy distribution')
    plt.xlabel('Ef')
    plt.ylabel('Ea')
    cbar = plt.colorbar()
    cbar.ax.set_ylabel('Counts')
    plt.legend()

################################################################################
#                             angular distribution                             #
################################################################################
if angularDistribution:
    nbins = 50
    fig2 = plt.figure(2)
    ax = fig2.add_subplot(111)
    n, bins, patches = ax.hist(a, bins=nbins)
    bincenters = 0.5*(bins[1:]+bins[:-1])
    # add a 'best fit' line for the normal PDF
    #y = mlab.normpdf( bincenters)
    l = ax.plot(bincenters, n, 'r--', linewidth=1)
    ax.set_title('Angular distribution')
    ax.set_xlabel('angle [degrees]')
    ax.set_ylabel('counts')

    max = 0
    for i in range(len(n)):
        if n[i] > max:
            max = n[i]
            maxIndex = i

    plt.text(bincenters[maxIndex]+2, 0.95*n[maxIndex], str('%1.1f' % bincenters[maxIndex]),fontsize=20)


################################################################################
#                   allowed / forbidden inital configurations                  #
################################################################################
if xyScatterPlot:
    pl.figure(3)
    pl.scatter(-xy_allowed[:,0],xy_allowed[:,1],c='b',label='allowed')
    pl.scatter(-xy_forbidden[:,0],xy_forbidden[:,0],c='r',marker='s',label='forbidden')
    pl.title('Starting configurations of TP relative to H.')
    pl.xlabel('x')
    pl.ylabel('y')
    pl.legend()


################################################################################
#                               x-y distribution                               #
################################################################################
if xyDistribution:
    nbins = 10
    H4, xedges4, yedges4 = np.histogram2d(-xy_allowed[:,0],xy_allowed[:,1])#,bins=nbins)
    Hmasked4 = np.ma.masked_where(H==0,H4) # Mask pixels with a value of zero
    fig1 = plt.figure(4)
    plt.pcolormesh(xedges4,yedges4,Hmasked4)
    plt.title('Starting configurations of TP relative to H.')
    plt.xlabel('x')
    plt.ylabel('y')
    cbar = plt.colorbar()
    cbar.ax.set_ylabel('Counts')

################################################################################
#                                D distribution                                 #
################################################################################
if DDistribution:
    nbins = 50
    fig2 = plt.figure(5)
    ax = fig2.add_subplot(111)
    n, bins, patches = ax.hist(Ds, bins=nbins)
    bincenters = 0.5*(bins[1:]+bins[:-1])
    # add a 'best fit' line for the normal PDF
    #y = mlab.normpdf( bincenters)
    l = ax.plot(bincenters, n, 'r--', linewidth=1)
    ax.set_title('Start values for D.')
    ax.set_xlabel('D')
    ax.set_ylabel('counts')


plt.show()
"""

